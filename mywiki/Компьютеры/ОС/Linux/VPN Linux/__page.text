!! VPN Linux

Да, из Microsoft Windows несколько проще подключится к VPN серверу по протоколу PPTP от Microsoft, используя протокол аутентификации Microsoft MS-CHAPv2, с использованием метода шифрования Microsoft Point-to-Point Encryption и сжатия Microsoft Point-to-Point Compression... Но к счастью, из под ОС Linux это тоже вполне реализуемо, а на сегодняшний день - еще и довольно просто, что и будет продемонстрировано ниже.

!!! MS-CHAPv2

Это протокол аутентификации, широко используемый в продуктах от Microsoft, в связи с чем стал, по-сути, стандартом. Он более защищен по сравнению с PAP/CHAP и является усовершенствованной версией MS-CHAP, использовавшегося ранее и славящегося своими дырами в плане безопасности сейчас :)
Его поддержка есть в pppd последних версий, для более ранних существуют патчи. К ядру MS-CHAP не имеет никакого отношения.

!!! MPPE и MPPC

MPPE - это Microsoft Point-to-Point Encryption, метод шифрования данных при передаче по VPN-каналу. Тоже довольно популярен, даже используется в некоторых аппаратных шлюзах, роутерах и т.д. Разумеется очень рекомендуется к применению, особенно при построении туннеля через "дикий" Интернет. 

Из тех что я видел, больше всего мне понравились патчи авторства Jan Dubiec - http://mppe-mppc.alphacron.de (ранее - www.polbox.com/h/hs001, некоторое время назад адрес поменяться) - понятные, документированные, поддерживаемые и рабочие.

Накладываем патч на ядро:

<code>
patch -p1 -i &lt;имя файла&gt;
</code>

Обратите внимание на вывод команды patch
Если заплатка идеально подходит к ядру, то в выводе должны быть только строчки patching file ... . Если вы видите строчку Hunk #1 succeeded at... это означает что заплатка наложена успешно, но место наложения сдвинуто на некоторое кол-во строк. Если же вы увидите слово Failed - то значит заплатка не подходит, нужно искать более подходящую.

Патчи ложатся на исходный код нормально, без напильника. После применения патча к ядру, в `make menuconfig` появляется новая опция - "Microsoft PPP compression/encryption 

!!! (MPPC/MPPE) (NEW)":

<code>
Linux Kernel v2.6.14.4 Configuration
¦ ¦ [*] Network device support
¦ ¦ ARCnet devices ---&gt;
¦ ¦ &lt; &gt; Dummy net driver support
¦ ¦ &lt;M&gt;Bonding driver support
¦ ¦ &lt;M&gt;EQL (serial line load balancing) support
¦ ¦ &lt;M&gt;Universal TUN/TAP device driver support
¦ ¦ &lt; &gt; Ethertap network tap (OBSOLETE)
¦ ¦ Ethernet (10 or 100Mbit) ---&gt;
¦ ¦ Ethernet (1000 Mbit) ---&gt;
¦ ¦ [ ] FDDI driver support
¦ ¦ [ ] HIPPI driver support (EXPERIMENTAL)
¦ ¦ &lt;M&gt;PPP (point-to-point protocol) support
| ¦ [ ] PPP multilink support (EXPERIMENTAL)
¦ ¦ [ ] PPP filtering
¦ ¦ &lt;M&gt;PPP support for async serial ports
¦ ¦ &lt;M&gt;PPP support for sync tty ports
¦ ¦ &lt;M&gt;PPP Deflate compression
¦ ¦ &lt;M&gt;PPP BSD-Compress compression
¦ ¦ &lt;M&gt;Microsoft PPP compression/encryption (MPPC/MPPE) (NEW)
¦ ¦ &lt;M&gt;PPP over Ethernet (EXPERIMENTAL)
¦ ¦ &lt; &gt; SLIP (serial line) support
¦ ¦ Wireless LAN (non-hamradio) ---&gt;
¦ ¦ Token Ring devices ---&gt;
¦ ¦ [ ] Fibre Channel driver support
¦ ¦ &lt;M&gt;Red Creek Hardware VPN (EXPERIMENTAL)
¦ ¦ &lt;M&gt;Traffic Shaper (EXPERIMENTAL)
¦ ¦ Wan interfaces ---&gt;
¦ ¦ PCMCIA network device support ---&gt;
</code>

Ее следует включить (CONFIG_PPP_MPPE=y, можно модулем ) и пересобрать ядро.

В ядрах версии 2.15.х.х и выше MPPC/MPPE уже иметься однако его нужно включить и пересобрать ядро. 
Так же нам понадобятся пакеты PPP и PPTP-Linux, которые наверняка есть в Вашем дистрибутиве.

Создаем директорию /etc/ppp/peers. В этой директории будут располагаться файлы с настройками вашего VPN соединения. Для примера создадим файл /etc/ppp/peers/ispname.

В нем прописываем всего две строки:

<code>
pty "pptp you_vpn_server_name_here --nolaunchpppd"
[[<<]]
file /etc/ppp/ispname.pptp
</code>

В первой строке после слова pptp указываем имя или ip адрес вашего VPN сервера. Во второй строке указываем имя файла, в котором будут храниться опции вашего VPN соединения с конкретным провайдером.

Создаем файл /etc/ppp/ispname.pptp и прописываем уже в него все опции нашего VPN соединения. Например, /etc/ppp/ispname.pptp:

<code>
lock
[[<<]]
noauth
[[<<]]
refuse-eap
[[<<]]
refuse-chap
[[<<]]
refuse-mschap
[[<<]]
nobsdcomp
[[<<]]
nodeflate
[[<<]]
require-mppe-128
[[<<]]
nodetach
[[<<]]
user user_name
[[<<]]
debug
[[<<]]
#mtu 1452
[[<<]]
#mru 1452
[[<<]]
defaultroute
</code>

Если вы не хотите использовать шлюз VPN как шлюз по умолчанию, то строку defaultroute нужно закомментировать, а после установки соединения прописать нужные маршруты самостоятельно. Опцию debug используем для вывода нам всех возможных ошибок при установке соединения. В строке user указываем Ваш логин на VPN сервер.

В файле /etc/ppp/chap-secrets прописываем строку "login" * "password" * в которой соответственно вписываем Ваш логин и пароль. Логин должен быть такой же как и в предыдущем файле строка user. Затем выставим права на этот файл: chmod 600 /etc/ppp/chap-secrets Для поддержания постоянного соединения с вашим VPN сервером удобно будет использовать следующий скрипт:

<code>
/root/scripts/vpn_start:
[[<<]]
#!/bin/bash
[[<<]]
LOG="/var/log/pptp-isp.log"
[[<<]]
while true;
[[<<]]
do echo -e "n========================n`date`" &gt;&gt; $LOG
[[<<]]
pppd call ispname &gt;&gt; $LOG
[[<<]]
sleep 10;
[[<<]]
done
</code>

Обратите внимание на выделенное слово ispname. Это и есть как раз имя того самого первого файла /etc/ppp/peers/ispname. Если меняется оно, то и в скрипте нужно тоже произвести замену. В итоге мы получаем постоянно работающий скрипт, запуск которого вызывает поднятие PPTP туннеля до провайдера, и при падении связи через 10 секунд постоянно производится перезапуск туннеля. Весь лог PPTP соединения мы будем видеть в файле /var/log/pptp-isp.log. Для того, чтобы запускать данный скрипт в фоне, делаем так: nohup /root/scripts/vpn_start >/dev/null 2>&amp;1 &amp;