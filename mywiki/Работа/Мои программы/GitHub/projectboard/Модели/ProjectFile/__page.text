!! ProjectFile

class ProjectFile(models.Model):
    """project: The project for which this file is attached.
    filename: name of the file.
    """
    project = models.ForeignKey(Project)
    filename = models.CharField(max_length = 200)
    #user = models.ForeignKey(User)
    created_on = models.DateTimeField(auto_now_add = 1)
    current_revision = models.ForeignKey('ProjectFileVersion', related_name = 'this_file', null = True)
    total_size = models.IntegerField()
    
    def size_str(self):
        "String representation of size"
        size = self.total_size
        if not (size / (1000 * 1000 )) == 0:
            size = float(size)/(1000 * 1000)
            return '%s %s'% (size, 'MB')
        elif not (size / (1000)) == 0:
            size = float(size)/(1000 )
            return '%s %s'% (size, 'KB')
        else:
            return '%s %s'% (size, 'bytes')
        
    def save(self):
        "Save and log."
        log = Log(text = "File %s has been added to %s." % (self.filename, self.project.name), project = self.project)
        log.description = 'File was created on %s' % time.strftime('%d %B %y')
        log.save()
        super(ProjectFile, self).save()
        
    def get_s3_url(self):
        return self.current_revision.get_s3_url()
    
    def __unicode__(self):
        return u'%s' % self.filename
    
    class Meta:
        ordering = ('-created_on', )
    
    class Admin:
        pass