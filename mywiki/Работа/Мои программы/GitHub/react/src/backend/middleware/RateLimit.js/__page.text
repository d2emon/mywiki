[@
/**
 * Лимитируем запросы к АПИ
 *
 * @type {{duration: number, whiteList: Array, blackList: Array, accessLimited: string, accessForbidden: string, codeLimited: number, codeForbidden: number, max: number}}
 */

let defaults = {
    duration: 1000 * 60 * 60 * 24,
    whiteList: [],
    blackList: [],
    accessLimited: '429: Too Many Requests.',
    accessForbidden: '403: This is forbidden area for you.',
    codeLimited: 429,
    codeForbidden: 403,
    max: 500,
};

const apiRateLimit = (options) => {
    options = options || {};
    let db = {};

    for (let key in defaults) {
        if (!options[key]) {
            options[key] = defaults[key];
        }
    }

    if (options.message_429) {
        options.accessLimited = options.message_429;
    }

    if (options.message_403) {
        options.accessForbidden = options.message_403;
    }

    return (req, res, next) => {
        // TODO: нужно заменить на что-то иное чем просто IP-адрес. За одним айпишником могут быть тысячи пользователей.
        let ip = req.ip;
        const now = Date.now();
        const reset = now + options.duration;

        if (!db.hasOwnProperty(ip)) {
            db[ip] = {ip: ip, reset: reset, limit: options.max}
        }

        const delta = db[ip].reset - now;
        const retryAfter = delta / 1000 | 0;

        db[ip].limit = db[ip].limit - 1;
        res.set('X-RateLimit-Limit', options.max);

        if (db[ip].reset > now) {
            res.set('X-RateLimit-Remaining', db[ip].limit < 0 ? 0 : db[ip].limit);
        }

        if (db[ip].limit < 0 && db[ip].reset < now) {
            db[ip] = {ip: ip, reset: reset, limit: options.max};
            db[ip].limit = db[ip].limit - 1;
            res.set('X-RateLimit-Remaining', db[ip].limit);
        }
        res.set('X-RateLimit-Reset', db[ip].reset);

        if (db[ip].limit < 0) {
            res.set('Retry-After', retryAfter);
            res.status(options.codeLimited).send({status: "error", code: options.codeLimited, message: options.accessLimited});
            return;
        }
        return next();
    };
};

export default apiRateLimit;
@]